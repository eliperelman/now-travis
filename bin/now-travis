#! /usr/bin/env node

const github = require('octonode');
const normalizeUrl = require('normalize-url');
const spawn = require('cross-spawn');
const travisAfterAll = require('travis-after-all');
const urlRegex = require('url-regex');
const fs = require('fs');
const nowCli = require.resolve('now/bin/now');

const argv = require('yargs').argv;
// should the URL be written to a file?
const writeURL = argv.file; // this will be the filename

if (!process.env.CI || !process.env.TRAVIS) {
  throw new Error('Could not detect Travis CI environment');
}

const githubToken = process.env.GH_TOKEN;
const nowToken = process.env.NOW_TOKEN;

if (!githubToken) {
  throw new Error('Missing required environment variable GH_TOKEN');
}

if (!nowToken) {
  throw new Error('Missing required environment variable NOW_TOKEN');
}

const client = github.client(githubToken);
const ghRepo = client.repo(process.env.TRAVIS_REPO_SLUG);

function noop() {}

function getUrl(content) {
  const urls = content.match(urlRegex()) || [];

  return urls.map(url => normalizeUrl(url.trim().replace(/\.+$/, '')))[0];
}

function deploy(context, sha) {
  ghRepo.status(sha, {
    context,
    state: 'pending',
    description: `Δ Now ${context} deployment pending`
  }, noop);

  const args = [
    '--token', nowToken,
    '--no-clipboard'
  ];
  const alias = context === 'production' && process.env.NOW_ALIAS;
  let stdout = '';

  if (alias) {
    args.push(...['--alias', alias]);
  }

  const child = spawn(nowCli, args);

  if (!alias) {
    child.stdout.on('data', data => stdout += data);
  }

  child.on('error', (err) => {
    console.error(err);
    ghRepo.status(sha, {
      context,
      state: 'error',
      description: `Δ Now ${context} deployment failed. See Travis logs for details.`
    }, noop);
  });

  child.on('close', () => {
    const target_url = alias || getUrl(stdout);
    if (writeURL) fs.writeFileSync(writeURL, target_url);
    // deployment is now complete

    ghRepo.status(sha, {
      context,
      target_url,
      state: 'success',
      description: `Δ Now ${context} deployment complete`
    }, noop);
  });
}

travisAfterAll((code, err) => {
  if (err || code) {
    throw err
  }

  switch (process.env.TRAVIS_EVENT_TYPE) {
    case 'pull_request': return deploy('staging', process.env.TRAVIS_PULL_REQUEST_SHA);
    case 'push': return deploy('production', process.env.TRAVIS_COMMIT);
  }
});
